
4. Embedding Layer
To create an embedding layer, use the Embedding() function from tensorflow.keras.layers. Since you have 10,887 unique teams in the dataset, you define the input dimension of the embedding layer as 10,887. As you are representing each team as a single integer, use an input length of 1. You want to produce a single team strength rating, so use an output dimension of 1. Finally, name your layer, so you can easily find it when looking at the model summary, or plot. To use the embedding layer, connect it to the tensor produced by the input layer. This will produce an embedding output tensor.

5. Flattening
Embedding layers increase the dimensionality of your data. The input CSV has two dimensions (rows and columns), but embedding layers add a third dimension. This third dimension can be useful when dealing with images and text, so it is not as relevant to this course. Therefore, we use the flatten layer to flatten the embeddings from 3D to 2D. The flatten layer is also the output layer for the embedding process. Flatten layers are an advanced layer for deep learning models and can be used to transform data from multiple dimensions back down to two dimensions. They are useful for dealing with time series data, text data, and images.


# Imports
from tensorflow.keras.layers import Embedding
from numpy import unique
# Count the unique number of teams
n_teams = unique(games_season['team_1']).shape[0]
# Create an embedding layer
team_lookup = Embedding(input_dim=n_teams,
                        output_dim=1,
                        input_length=1,
                        name='Team-Strength')

# Imports
from tensorflow.keras.layers import Input, Embedding, Flatten
from tensorflow.keras.models import Model
# Create an input layer for the team ID
teamid_in = Input(shape=(1,))
# Lookup the input in the team strength embedding layer
strength_lookup = team_lookup(teamid_in)
# Flatten the output
strength_lookup_flat = Flatten()(strength_lookup)
# Combine the operations into a single, re-usable model
team_strength_model = Model(teamid_in, strength_lookup_flat, name='Team-Strength-Model')

--->Shared layers:
# Load the input layer from tensorflow.keras.layers
from tensorflow.keras.layers import Input
# Input layer for team 1
team_in_1 = Input(shape=(1,),name="Team-1-in")
# Separate input layer for team 2
team_in_2 = Input(shape=(1,),name="Team-2-in")

# Lookup team 1 in the team strength model
team_1_strength = team_strength_model(team_in_1)
# Lookup team 2 in the team strength model
team_2_strength = team_strength_model(team_in_2)

--->Merge layers:
# Import the Subtract layer from tensorflow.keras
from tensorflow.keras.layers import Subtract
# Create a subtract layer using the inputs from the previous exercise
score_diff = Subtract()([team_1_strength, team_2_strength])


# Imports
from tensorflow.keras.layers import Subtract
from tensorflow.keras.models import Model
# Subtraction layer from previous exercise
score_diff = Subtract()([team_1_strength, team_2_strength])
# Create the model
model = Model([team_in_1, team_in_2], score_diff)
# Compile the model
model.compile(optimizer='adam', loss='mean_absolute_error')

---->Fit the model to the regular season training data:
# Get the team_1 column from the regular season data
input_1 = games_season['team_1']
# Get the team_2 column from the regular season data
input_2 = games_season['team_2']
# Fit the model to input 1 and 2, using score diff as a target
model.fit([input_1,input_2],		#We pass a list of inputs
          games_season['score_diff'],
          epochs=1,
          batch_size=2048,
          validation_split=0.1,
          verbose=True)

# Get team_1 from the tournament data
input_1 = games_tourney['team_1']
# Get team_2 from the tournament data
input_2 = games_tourney['team_2']
# Evaluate the model using these inputs
print(model.evaluate([input_1,input_2], games_tourney['score_diff'], verbose=False))